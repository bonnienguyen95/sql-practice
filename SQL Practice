---178. Rank Score - https://leetcode.com/problems/rank-scores/
SELECT Score, DENSE_RANK() OVER (ORDER BY Score DESC) AS Rank
FROM Scores;


---574. Winning Candidate - https://leetcode.com/problems/winning-candidate/
SELECT Name
FROM (
    SELECT v.CandidateID, c.Name, COUNT(*) AS total
    FROM Vote v
    LEFT JOIN Candidate c
    ON c.id = v.CandidateId
    GROUP BY v.CandidateID, c.Name
    ORDER BY total DESC)
WHERE ROWNUM = 1;


---1112. Highest Grade For Each Student - https://leetcode.com/problems/highest-grade-for-each-student/

SELECT student_id, course_id, grade
FROM (
    SELECT student_id, course_id, grade,
    RANK () OVER (PARTITION BY student_id ORDER BY course_id) AS course_rank
    FROM (
        SELECT student_id, course_id, grade,
        RANK() OVER (PARTITION BY student_id ORDER BY grade DESC) AS grade_rank
        FROM Enrollments)
        WHERE grade_rank = 1)
WHERE course_rank = 1;

---1393. Capital Gain/Loss - https://leetcode.com/problems/capital-gainloss/
SELECT stock_name,
SUM(CASE WHEN operation = 'Buy' THEN (-1)*price
ELSE price END) AS capital_gain_loss
FROM Stocks
GROUP BY stock_name;


---1440. Evaluate Boolean Expression - https://leetcode.com/problems/evaluate-boolean-expression/

SELECT e.left_operand, e.operator, e.right_operand,
CASE WHEN v1.value > v2.value AND e.operator = '>' THEN 'true'
     WHEN v1.value < v2.value AND e.operator = '<' THEN 'true'
     WHEN v1.value = v2.value AND e.operator = '=' THEN 'true'
     ELSE 'false' END AS value
FROM Expressions e
LEFT JOIN Variables v1
ON e.left_operand = v1.name
LEFT JOIN Variables v2
ON e.right_operand = v2.name;


---1341. Movie Rating - https://leetcode.com/problems/movie-rating/

SELECT name AS results
FROM (
    SELECT u.name, m1.user_id, COUNT(*) AS total_rating
    FROM Movie_Rating m1
    LEFT JOIN Users u
    ON m1.user_id = u.user_id
    GROUP BY u.name, m1.user_id
    ORDER BY COUNT(*) DESC, u.name)
WHERE ROWNUM = 1
UNION ALL
SELECT title AS results
FROM (
    SELECT m3.title, m2.movie_id, AVG(rating)
    FROM Movie_Rating m2
    LEFT JOIN Movies m3
    ON m2.movie_id = m3.movie_id
    WHERE TO_CHAR(created_at, 'YYYY-MM')='2020-02'
    GROUP BY m3.title, m2.movie_id
    ORDER BY AVG(rating) DESC, m3.title)
WHERE ROWNUM = 1;

---1164. Product Price at a Given Date - https://leetcode.com/problems/product-price-at-a-given-date/

# Write your MySQL query statement below

SELECT DISTINCT p1.product_id, COALESCE(p3.new_price, 10) AS price
FROM products p1
LEFT JOIN
(SELECT p2.product_id, p2.new_price
 FROM products p2
 WHERE (p2.product_id, p2.change_date) IN
        (
        SELECT product_id, MAX(change_date) AS date
        FROM products
        WHERE change_date <= '2019-08-16'
        GROUP BY product_id)) p3
ON p1.product_id = p3.product_id;

---1212. Team Scores in Football Tournament - https://leetcode.com/problems/team-scores-in-football-tournament/
SELECT c.team_id AS team_id, c.team_name, NVL(SUM(b.num_points), 0) AS num_points
FROM (
    SELECT host_team AS team, SUM(result) AS num_points
    FROM (
        SELECT match_id, host_team, guest_team,
        CASE WHEN host_goals > guest_goals THEN 3
        WHEN host_goals < guest_goals THEN 0
        ELSE 1
        END AS result
        FROM Matches) a
    GROUP BY host_team

    UNION ALL

    SELECT guest_team AS team, SUM(result) AS num_points
    FROM (
        SELECT match_id, host_team, guest_team,
        CASE WHEN host_goals < guest_goals THEN 3
        WHEN host_goals > guest_goals THEN 0
        ELSE 1
        END AS result
        FROM Matches) a
    GROUP BY guest_team) b
FULL JOIN Teams c
ON b.team = c.team_id
GROUP BY c.team_id, c.team_name
ORDER BY num_points DESC, team_id ASC;

---1445. Apples & Oranges - https://leetcode.com/problems/apples-oranges/
# Write your MySQL query statement below

SELECT s1.sale_date, (s1.sold_num - s2.sold_num) AS diff
FROM sales s1
LEFT JOIN sales s2
ON s1.sale_date = s2.sale_date
WHERE s1.fruit = 'apples' AND s2.fruit = 'oranges'
GROUP BY s1.sale_date;

---1205. Monthly Transactions II - https://leetcode.com/problems/monthly-transactions-ii/
select
to_char(trans_date, 'YYYY-MM') as month
, country
, sum(case when state like 'app%' then 1 else 0 end) as approved_count
, sum(case when state like 'app%' then amount else 0 end) as approved_amount
, sum(chargebacks) as chargeback_count
, sum(case when chargebacks = 1 then amount else 0 end) as chargeback_amount
from(
select t.*, 0 as chargebacks
from transactions t
union all
select *
from (
select c.trans_id, t1.country, null as state, t1.amount, c.trans_date, 1 as chargebacks
from chargebacks c
left join transactions t1
on t1.id = c.trans_id
)
)
group by to_char(trans_date, 'YYYY-MM'), country
having sum(case when state like 'app%' then 1 else 0 end) <> 0
or sum(case when state like 'app%' then amount else 0 end) <> 0
or sum(chargebacks) <> 0
or sum(case when chargebacks = 1 then amount else 0 end) <>0
order by to_char(trans_date, 'YYYY-MM')

